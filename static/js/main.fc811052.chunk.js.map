{"version":3,"sources":["component/SearchBar.js","App.js","serviceWorker.js","index.js","ressource/logo.svg"],"names":["SearchBar","props","useState","value","setValue","getEvent","a","urlToFetch","fetch","response","ok","json","jsonResponse","venues","groups","items","map","item","venue","onResult","console","log","type","placeholder","onChange","e","target","onClick","App","state","className","src","logo","alt","setState","this","key","id","categories","icon","prefix","suffix","name","location","address","city","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"+SA+CeA,MA5Cf,SAAmBC,GAAO,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,KAYfC,EAAQ,uCAAE,kCAAAC,EAAA,6DACNC,EADM,UANJ,sDAMI,OACgBJ,EADhB,+BARC,mDAQD,0BAPK,mDAOL,iCAGWK,MAAMD,GAHjB,YAGNE,EAHM,QAICC,GAJD,iCAKmCD,EAASE,OAL5C,OAKcC,EALd,OAMcC,EAASD,EAAaH,SAASK,OAAO,GAAGC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,SACtEjB,EAAMkB,SAASN,GAPvB,0DAYAO,QAAQC,IAAR,MAZA,0DAAF,qDAgBd,OACI,6BACQ,2BACIC,KAAK,OACLC,YAAY,gBACZpB,MAAOA,EACPqB,SA1BK,SAACC,GAClBrB,EAASqB,EAAEC,OAAOvB,UA2BV,4BACIwB,QAAStB,GADb,Y,gBCADuB,E,kDAhCb,WAAY3B,GAAO,IAAD,8BAChB,cAAMA,IACD4B,MAAM,CACThB,OAAQ,IAHM,E,qDAOT,IAAD,OACR,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,8CACA,kBAAC,EAAD,CAAWd,SAAU,SAAAN,GAAM,OAAI,EAAKqB,SAAS,CAACrB,OAAQA,QAExD,yBAAKiB,UAAU,aACZK,KAAKN,MAAMhB,OAAOG,KAAI,SAAAE,GACpB,OACD,yBAAKkB,IAAKlB,EAAMmB,GAAIP,UAAU,OAC5B,yBAAKC,IAAG,UAAKb,EAAMoB,WAAW,GAAGC,KAAKC,OAA9B,gBAA4CtB,EAAMoB,WAAW,GAAGC,KAAKE,QAAUR,IAAKf,EAAMwB,OAClG,4BAAKxB,EAAMwB,MACVxB,EAAMyB,SAASC,QAAQ,6BACvB1B,EAAMyB,SAASE,e,GAvBVC,IAAMC,WCMJC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.fc811052.chunk.js","sourcesContent":["import React, { useState} from 'react';\r\n\r\n\r\nfunction SearchBar(props){\r\n    \r\n    const [value, setValue] = useState('');\r\n    \r\n    const clientId = 'UK4M32ISUNYENKVKB01XDU55BM4WFLV0NNA4ZIAZLPLRK3LU';\r\n    const clientSecret = 'ANEWJEZOWCW1LIIS3TRTU2ZSUUYFJ0XHDWGYLJALH1TXLC3F';\r\n    const url = 'https://api.foursquare.com/v2/venues/explore?near=';\r\n    \r\n    const handleChange = (e)=>{\r\n        setValue(e.target.value);\r\n    }\r\n    \r\n    const getEvent= async() =>{\r\n        const urlToFetch = `${url}${value}&limit=10&client_id=${clientId}&client_secret=${clientSecret}&v=20200511`;\r\n        try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n                            const jsonResponse = await response.json();\r\n                            const venues = jsonResponse.response.groups[0].items.map(item => item.venue);\r\n                            props.onResult(venues)\r\n                            ;\r\n                        }\r\n        }\r\n        catch(err){\r\n                    console.log(err)\r\n                }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n                <input \r\n                    type='text'\r\n                    placeholder=\"Enter A Place\" \r\n                    value={value}\r\n                    onChange={handleChange}\r\n                />\r\n                <button\r\n                    onClick={getEvent}\r\n                >Submit</button>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport './App.scss';\nimport SearchBar from './component/SearchBar';\nimport logo from './ressource/logo.svg';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      venues: []\n    }\n  }\n\n  render(){\n  return (\n    <div className='App'>\n      <div className='searchBar'>\n        <img src={logo} alt='logo'></img>\n        <h1>Favorite Spots</h1>\n        <SearchBar onResult={venues => this.setState({venues: venues})} />\n      </div>\n      <div className='container'>\n        {this.state.venues.map(venue=>\n          {return (\n          <div key={venue.id} className='box'>\n            <img src={`${venue.categories[0].icon.prefix}bg_64${venue.categories[0].icon.suffix}`} alt={venue.name}/>\n            <h4>{venue.name}</h4>\n            {venue.location.address}<br></br>\n            {venue.location.city}\n          </div>)\n          })}\n      </div>\n    </div>\n  )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.3be072e8.svg\";"],"sourceRoot":""}